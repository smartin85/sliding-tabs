/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface SlidingTab {
      'setStateHandler': (handler: (tabName?: string) => void) => void;
      'tabName': string;
    }

    interface SlidingTabsButton {
      'active': boolean;
      'forTab': string;
      'getElement': () => HTMLElement;
    }

    interface SlidingTabsContent {
      'dragThreshold': number;
    }

    interface SlidingTabsIndicator {
      'movePanIndicator': (percentage?: number) => void;
      'setButtons': (buttons: HTMLElement[]) => void;
    }

    interface SlidingTabsToolbar {
      'activeTabPosition': 'left' | 'center' | 'right';
      'indicatorPlacement': 'top' | 'bottom';
      'movePanIndicator': (val?: number) => void;
      'scrollToButton': (name: string) => void;
      'scrollToLeft': () => void;
      'scrollToPrevious': () => void;
      'scrollToRight': () => void;
      'scrollable': boolean;
      'setActiveTab': (name: string, index?: number) => void;
    }

    interface SlidingTabs {
      'activeTab': string;
      'activeTabIndex': number;
    }
  }


    interface HTMLSlidingTabElement extends StencilComponents.SlidingTab, HTMLStencilElement {}

    var HTMLSlidingTabElement: {
      prototype: HTMLSlidingTabElement;
      new (): HTMLSlidingTabElement;
    };
    

    interface HTMLSlidingTabsButtonElement extends StencilComponents.SlidingTabsButton, HTMLStencilElement {}

    var HTMLSlidingTabsButtonElement: {
      prototype: HTMLSlidingTabsButtonElement;
      new (): HTMLSlidingTabsButtonElement;
    };
    

    interface HTMLSlidingTabsContentElement extends StencilComponents.SlidingTabsContent, HTMLStencilElement {}

    var HTMLSlidingTabsContentElement: {
      prototype: HTMLSlidingTabsContentElement;
      new (): HTMLSlidingTabsContentElement;
    };
    

    interface HTMLSlidingTabsIndicatorElement extends StencilComponents.SlidingTabsIndicator, HTMLStencilElement {}

    var HTMLSlidingTabsIndicatorElement: {
      prototype: HTMLSlidingTabsIndicatorElement;
      new (): HTMLSlidingTabsIndicatorElement;
    };
    

    interface HTMLSlidingTabsToolbarElement extends StencilComponents.SlidingTabsToolbar, HTMLStencilElement {}

    var HTMLSlidingTabsToolbarElement: {
      prototype: HTMLSlidingTabsToolbarElement;
      new (): HTMLSlidingTabsToolbarElement;
    };
    

    interface HTMLSlidingTabsElement extends StencilComponents.SlidingTabs, HTMLStencilElement {}

    var HTMLSlidingTabsElement: {
      prototype: HTMLSlidingTabsElement;
      new (): HTMLSlidingTabsElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'sliding-tab': JSXElements.SlidingTabAttributes;
    'sliding-tabs-button': JSXElements.SlidingTabsButtonAttributes;
    'sliding-tabs-content': JSXElements.SlidingTabsContentAttributes;
    'sliding-tabs-indicator': JSXElements.SlidingTabsIndicatorAttributes;
    'sliding-tabs-toolbar': JSXElements.SlidingTabsToolbarAttributes;
    'sliding-tabs': JSXElements.SlidingTabsAttributes;
    }
  }

  namespace JSXElements {

    export interface SlidingTabAttributes extends HTMLAttributes {
      'onSlidingTabLoaded'?: (event: CustomEvent) => void;
      'tabName'?: string;
    }

    export interface SlidingTabsButtonAttributes extends HTMLAttributes {
      'active'?: boolean;
      'forTab'?: string;
      'onSlidingTabsActiveTabChange'?: (event: CustomEvent) => void;
      'onSlidingTabsButtonLoaded'?: (event: CustomEvent) => void;
    }

    export interface SlidingTabsContentAttributes extends HTMLAttributes {
      'dragThreshold'?: number;
      'onSlidingTabsActiveTabChange'?: (event: CustomEvent) => void;
      'onSlidingTabsContentLoaded'?: (event: CustomEvent) => void;
      'onSlidingTabsPanChange'?: (event: CustomEvent) => void;
      'onSlidingTabsPanIndexChange'?: (event: CustomEvent) => void;
    }

    export interface SlidingTabsIndicatorAttributes extends HTMLAttributes {
      'onSlidingTabsIndicatorLoaded'?: (event: CustomEvent) => void;
    }

    export interface SlidingTabsToolbarAttributes extends HTMLAttributes {
      'activeTabPosition'?: 'left' | 'center' | 'right';
      'indicatorPlacement'?: 'top' | 'bottom';
      'onSlidingTabsToolbarLoaded'?: (event: CustomEvent) => void;
      'scrollable'?: boolean;
    }

    export interface SlidingTabsAttributes extends HTMLAttributes {
      'activeTab'?: string;
      'activeTabIndex'?: number;
      'onTabChanged'?: (event: CustomEvent) => void;
    }
  }

  interface HTMLElementTagNameMap {
    'sliding-tab': HTMLSlidingTabElement
    'sliding-tabs-button': HTMLSlidingTabsButtonElement
    'sliding-tabs-content': HTMLSlidingTabsContentElement
    'sliding-tabs-indicator': HTMLSlidingTabsIndicatorElement
    'sliding-tabs-toolbar': HTMLSlidingTabsToolbarElement
    'sliding-tabs': HTMLSlidingTabsElement
  }

  interface ElementTagNameMap {
    'sliding-tab': HTMLSlidingTabElement;
    'sliding-tabs-button': HTMLSlidingTabsButtonElement;
    'sliding-tabs-content': HTMLSlidingTabsContentElement;
    'sliding-tabs-indicator': HTMLSlidingTabsIndicatorElement;
    'sliding-tabs-toolbar': HTMLSlidingTabsToolbarElement;
    'sliding-tabs': HTMLSlidingTabsElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;